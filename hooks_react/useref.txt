
---

## **1. Definition**

`useRef` is a React Hook that lets you:

1. **Directly access and store references** to DOM elements.
2. **Store a mutable value** that doesn’t trigger a re-render when it changes.

Think of it as a **box** (`.current`) where you can store something, and React will keep that same box for the lifetime of the component.

---

## **2. Syntax**

```javascript
const refName = useRef(initialValue);
```

* **`refName.current`** → Holds the value (starts with `initialValue`).
* Changing `.current` **does not cause** the component to re-render.

---

## **3. Example 1: Access a DOM element**

```javascript
import React, { useRef } from "react";

function InputFocus() {
  const inputRef = useRef(null);

  const focusInput = () => {
    inputRef.current.focus(); // directly focus the input
  };

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Type here..." />
      <button onClick={focusInput}>Focus Input</button>
    </div>
  );
}

export default InputFocus;
```

**Workflow:**

1. `useRef(null)` → creates an object `{ current: null }`.
2. React assigns the input DOM element to `inputRef.current`.
3. Clicking the button calls `.focus()` on that element.

---

## **4. Example 2: Storing a value without re-render**

```javascript
import React, { useRef, useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);
  const renderCount = useRef(0);

  renderCount.current += 1; // keeps value between renders without causing re-render

  return (
    <div>
      <h1>Count: {count}</h1>
      <h2>Renders: {renderCount.current}</h2>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </div>
  );
}

export default Counter;
```

**Workflow:**

1. `renderCount` stores a number that survives re-renders.
2. Updating `.current` does **not** trigger re-render.
3. Useful for keeping data between renders without causing re-renders.

---

## **5. Key Points**

* **Changing `.current` does not re-render** the component.
* Good for:

  * Accessing **DOM elements** (`ref={...}`)
  * Storing **mutable values** between renders
  * **Avoiding state updates** when you just need to store something temporarily
* The object returned from `useRef` is **persistent** across renders.

---

## **6. Real-world Examples**

* **Form handling** → focus input after error.
* **Video player** → play/pause directly from a ref.
* **Canvas drawing** → store reference to the canvas context.
* **Stopwatch** → store timer ID without re-rendering.
* **Tracking previous value** → store old props or state.

---


---

```javascript
import React, { useRef, useState } from "react";

export default function UseRefDemo() {
  // 1️⃣ DOM element control
  const inputRef = useRef(null);

  // 2️⃣ Store mutable value without re-render
  const renderCount = useRef(0);

  const [text, setText] = useState("");

  const focusInput = () => {
    inputRef.current.focus(); // Focus the input
  };

  renderCount.current += 1; // Increment on every render, no extra re-render

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h1>useRef Demo</h1>

      {/* DOM element control */}
      <input
        ref={inputRef}
        type="text"
        placeholder="Type something..."
        value={text}
        onChange={(e) => setText(e.target.value)}
        style={{ padding: "8px", marginRight: "10px" }}
      />
      <button onClick={focusInput}>Focus Input</button>

      {/* Mutable value without re-render */}
      <div style={{ marginTop: "20px" }}>
        <p>Current text: {text}</p>
        <p>Render count (tracked via useRef): {renderCount.current}</p>
      </div>
    </div>
  );
}
```

---

### **How It Works**

1. **DOM Element Control**

   * `inputRef` is passed to the input’s `ref` prop.
   * Clicking **"Focus Input"** runs `inputRef.current.focus()`, directly focusing the element.
2. **Mutable Value Without Re-render**

   * `renderCount.current` increments on every render.
   * Updating `.current` does **not** cause another render — it’s just stored.

---

### **How to Test**

1. Create a React app:

   ```sh
   npx create-react-app useref-demo
   ```
2. Replace `App.js` with the code above.
3. Open browser → Type in input → Click **"Focus Input"**.
4. Notice how **render count** changes only when state changes, but doesn’t trigger extra renders.

---



